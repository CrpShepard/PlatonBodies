using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PlatonBodies
{
    public class PlatonBodies
    {

        // Piramide
        public readonly float[] piramide_vertices =
        {
            // Position       

            -0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,  // forward
            0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, -2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 2.0f, -2.0f, 0.0f, // left
            -0.5f, 0.0f, 0.5f, 2.0f, -2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, -2.0f, 0.0f,

            0.5f, 0.0f, -0.5f, 2.0f, 2.0f, 0.0f, // right
            0.5f, 0.0f, 0.5f, 2.0f, 2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, 2.0f, 0.0f,

            -0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f, // back
            0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, 2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 0.0f, -1.0f, 0.0f, // bottom
            0.5f, 0.0f, 0.5f, 0.0f, -1.0f, 0.0f,
            -0.5f, 0.0f, 0.5f, 0.0f, -1.0f, 0.0f,

            0.5f, 0.0f, 0.5f, 0.0f, -1.0f, 0.0f,
            -0.5f, 0.0f, -0.5f, 0.0f, -1.0f, 0.0f,
            0.5f, 0.0f, -0.5f, 0.0f, -1.0f, 0.0f,
            
        };

        // Octaedr
        public readonly float[] octaedr_vertices =
        {
            // Position       

            -0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,  // top-forward
            0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, -2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 2.0f, -2.0f, 0.0f, // top-left
            -0.5f, 0.0f, 0.5f, 2.0f, -2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, -2.0f, 0.0f,

            0.5f, 0.0f, -0.5f, 2.0f, 2.0f, 0.0f, // top-right
            0.5f, 0.0f, 0.5f, 2.0f, 2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, 2.0f, 0.0f,

            -0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f, // top-back
            0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, 2.0f, 2.0f,

           -0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,  // bottom-forward
            0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,
            0.0f, -0.5f, 0.0f, 0.0f, -2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 2.0f, -2.0f, 0.0f, // bottom-left
            -0.5f, 0.0f, 0.5f, 2.0f, -2.0f, 0.0f,
            0.0f, -0.5f, 0.0f, 2.0f, -2.0f, 0.0f,

            0.5f, 0.0f, -0.5f, 2.0f, 2.0f, 0.0f, // bottom-right
            0.5f, 0.0f, 0.5f, 2.0f, 2.0f, 0.0f,
            0.0f, -0.5f, 0.0f, 2.0f, 2.0f, 0.0f,

            -0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f, // bottom-back
            0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f,
            0.0f, -0.5f, 0.0f, 0.0f, 2.0f, 2.0f,

        };

        // Cube
        public readonly float[] cube_vertices =
        {
             // Position          Normal
            -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Front face
             0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
             0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
             0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
            -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
            -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

            -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Back face
             0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
            -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
            -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,

            -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f, // Left face
            -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

             0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f, // Right face
             0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
             0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
             0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
             0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
             0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

            -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f, // Bottom face
             0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
             0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
             0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
            -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
            -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

            -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, // Top face
             0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
            -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
            -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
        };

        public readonly float[] dodecahedron_vertices =
        {
            -1.0f, 1.0f, 1.0f,   // 0   A
            0.0f, 0.59f, 1.7f,   // 1   B
            0.0f, -0.59f, 1.7f,  // 2   C
            -1.0f, -1.0f, 1.0f,  // 3   D
            -1.7f, 0.0f, 0.59f,  // 4   E
            1.0f, 1.0f, 1.0f,    // 5   F
            1.7f, 0.0f, 0.59f,   // 6   G
            1.0f, -1.0f, 1.0f,   // 7   H
            0.59f, 1.7f, 0.0f,   // 8   I
            -0.59f, 1.7f, 0.0f,  // 9   J
            -1.0f, 1.0f, -1.0f,  // 10  K
            -1.7f, 0.0f, -0.59f, // 11  L
            -1.0f, -1.0f, -1.0f, // 12  M
            -0.59f, -1.7f, 0.0f, // 13  N
            0.59f, -1.7f, 0.0f,  // 14  O
            1.0f, 1.0f, -1.0f,   // 15  P
            0.0f, 0.59f, -1.7f,  // 16  Q
            1.7f, 0.0f, -0.59f,  // 17  R
            0.0f, -0.59f, -1.7f, // 18  S
            1.0f, -1.0f, -1.0f   // 19  T
        };

        public readonly uint[] dodecahedron_indices =
        {
            0, 1, 2, 0, 2, 4, 2, 3, 4,          // 0 // Upper 
            3, 2, 13, 3, 7, 13, 7, 14, 13,      // 1
            7, 2, 1, 7, 2, 6, 2, 5, 6,          // 2
            5, 2, 0, 5, 0, 8, 0, 9, 8,          // 3

            0, 4, 11, 0, 11, 10, 0, 10, 9,      // 4 // Middle
            3, 13, 12, 3, 12, 11, 3, 11, 4,     // 5
            7, 6, 17, 7, 17, 19, 7, 19, 14,     // 6
            5, 8, 15, 5, 15, 17, 5, 17, 6,      // 7

            8, 9, 10, 8, 10, 16, 8, 16, 15,     // 8 // Bottom
            11, 12, 18, 11, 18, 16, 11, 16, 10, // 9
            13, 14, 19, 13, 19, 18, 13, 18, 12, // 10
            17, 15, 16, 17, 16, 18, 17, 18, 19  // 11
        };
    }
}
